#!/bin/bash
# search
set -Eeuo pipefail
set -e
# Sanity check command line options
usage() {
  echo "Usage: $0 (start|stop|restart)"
}

if [ $# -ne 1 ]; then
  usage
  exit 1
fi

status_exit_status=$(./bin/index status > /dev/null ; echo $?)

# Parse argument.  $1 is the first argument
case $1 in
    "start")
    if [ ! -e var/search.sqlite3 ]; then 
        echo "Error: can't find search database var/search.sqlite3\n
        Try: ./bin/searchdb create"
    elif [ $status_exit_status -ne 0 ]; then
        echo "Error: index server is not running
        Try ./bin/index start"
    elif pgrep -f "flask --app search run --host 0.0.0.0 --port 8000" &> /dev/null; then
        echo "Error: search server is already running"
    else
        echo "starting search server ..."
        mkdir -p var/log
        rm -f var/log/search.log
        flask --app search run --host 0.0.0.0 --port 8000 &> var/log/search.log &        
    fi
    ;;

    "stop")
        echo "stopping search server ..."
        pkill -f 'flask --app search run --host 0.0.0.0 --port 8000' || true
        ;;

    "restart")
        ./$0 stop
        ./$0 start
        ;;

    "status")
        set +o pipefail
        NPROCS=$(pgrep -f "flask --app search run --host 0.0.0.0 --port 8000" | wc -l)
        set -o pipefail
        if [ "$NPROCS" -eq 1 ]; then
        echo "search server running"
        exit
        elif [ "$NPROCS" -eq 0 ]; then
        echo "search server stopped"
        exit 1
        else
        echo "search server error: found ${NPROCS} processes, expected 1"
        exit 2
        fi
        ;;
    *)
    usage
    exit 1
    ;;
esac
